{
  "swagger": "2.0",
  "info": {
    "version": "v0.0.3",
    "title": "Speckle API",
    "description": "Documentation & specifications for the Speckle Server & Speckle Objects.\n\nhttps://speckle.works\n\nThis document is an OpenApi v.2.0 specification for Speckle. It does *not* cover the realtime communication layer (websockets).\n\nThere are two main parts you should look at:\n### 1. Operations\nThis section describes all the available `operations` that the speckle server can perform, revolving around a simple `Accounts` system, `Clients` (keeping track of all the receivers and senders), `Streams` (main data structure) and `Objects`.\n\n### 2. Schema Defintions\nThis section describes the basic building blocks that Speckle works with. It also contains an extensive list of `Payloads` and `Responses` which are less interesting, but a through look at the `SpeckleObject` and its children is needed, especially if you're looking into implementing your own application specific converter. \n\n*Important note*: the following speckle object types `Polyline, Curve, Mesh, Brep` are treated server side in a special manner, as they can be unbounded in size.\n\n###Â Client code generation\nTo generate api clients, you can either use `swagger-codegen` or, alternatively, open up `index.json` (https://raw.githubusercontent.com/didimitrie/SpeckleOpenApi/master/index.json) in the swagger editor (https://editor.swagger.io).\n\n### Contribute\nIf you want to add another type of speckle object, or simply improve the schema, feel free to fork & pr over on github.",
    "contact": {
      "name": "Dimitrie @idid",
      "url": "https://speckle.works",
      "email": "didimitrie@gmail.com"
    },
    "license": {
      "name": ""
    }
  },
  "host": "localhost:8080",
  "basePath": "/api",
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "security": [
    {
      "JWT Token Auth": []
    }
  ],
  "securityDefinitions": {
    "JWT Token Auth": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "paths": {
    "/accounts/register": {
      "post": {
        "tags": [
          "Accounts"
        ],
        "summary": "UserRegister",
        "description": "Registers a new user.",
        "operationId": "UserRegister",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PayloadAccountRegister"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "New user successfully registered.",
            "schema": {
              "$ref": "#/definitions/ResponseAccountRegister"
            },
            "examples": {
              "application/json": "{\n  \"success\": true,\n  \"message\": \"User saved. Redirect to login.\",\n  \"apitoken\": \"JWT ABC\",\n  \"token\": \"JWT XYZ\"\n}"
            }
          },
          "400": {
            "description": "Failed to register a new user.",
            "schema": {
              "$ref": "#/definitions/ResponseBase"
            }
          }
        },
        "security": []
      }
    },
    "/accounts/login": {
      "post": {
        "tags": [
          "Accounts"
        ],
        "summary": "UserLogin",
        "description": "Login and get jwt token.",
        "operationId": "UserLogin",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PayloadAccountLogin"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status 200",
            "schema": {
              "$ref": "#/definitions/ResponseAccountLogin"
            },
            "examples": {
              "application/json": "{\n  \"success\": true,\n  \"token\": \"JWT eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1OTYwODQ5YjQwNzU3MmVmYTg4YTU0NzAiLCJuYW1lIjoiRGltaXRyaWUiLCJpYXQiOjE0OTk0OTc2OTMsImV4cCI6MTQ5OTU4NDA5M30.BsM4du4R0MIjn_JBRst4Jq3xoyNBS6-Y8NmpUuemvlE\",\n  \"user\": {\n    \"name\": \"Dimitrie\",\n    \"surname\": \"Doe\",\n    \"email\": \"johndoe57@apple.com\",\n    \"logins\": [\n      {\n        \"date\": 1499497693389\n      }\n    ],\n    \"apiToken\": \"JWT eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1OTYwODQ5YjQwNzU3MmVmYTg4YTU0NzAiLCJpYXQiOjE0OTk0OTc2MjcsImV4cCI6MTU2MjYxMjgyN30.xdXflg0nc4OWknaSiUKOevwhk4PLXhiKku8SkVdpUwA\"\n  }\n}"
            }
          },
          "400": {
            "description": "Fail whale.",
            "schema": {
              "$ref": "#/definitions/ResponseBase"
            }
          }
        },
        "security": []
      }
    },
    "/accounts/streams": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "UserStreamsGet",
        "description": "Gets all the streams for a user (identified via the authorization token, so if that is s not present, it will not work).",
        "operationId": "UserStreamsGet",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Status 200",
            "schema": {
              "$ref": "#/definitions/ResponseAccountStreams"
            }
          },
          "400": {
            "description": "Fail whale.",
            "schema": {
              "$ref": "#/definitions/ResponseBase"
            }
          },
          "401": {
            "description": "Fail whale.",
            "schema": {
              "$ref": "#/definitions/ResponseBase"
            }
          }
        },
        "security": [
          {
            "JWT Token Auth": []
          }
        ]
      }
    },
    "/accounts/clients": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "UserClientsGet",
        "description": "Gets all the clients for a user (identified via the authorization token, so if that is s not present, it will not work).",
        "operationId": "UserClientsGet",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Status 200",
            "schema": {
              "$ref": "#/definitions/ResponseAccountClients"
            }
          },
          "400": {
            "description": "Fail whale.",
            "schema": {
              "$ref": "#/definitions/ResponseBase"
            }
          }
        },
        "security": [
          {
            "JWT Token Auth": []
          }
        ]
      }
    },
    "/accounts/profile": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "UserGetProfile",
        "description": "Gets the user's profile.",
        "operationId": "UserGetProfile",
        "responses": {
          "200": {
            "description": "Status 200",
            "schema": {
              "$ref": "#/definitions/ResponseAccountProfile"
            }
          },
          "400": {
            "description": "Fail whale.",
            "schema": {
              "$ref": "#/definitions/ResponseBase"
            }
          }
        },
        "security": [
          {
            "JWT Token Auth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Accounts"
        ],
        "summary": "UserUpdate",
        "description": "TODO. Should update user profile with new information.",
        "operationId": "UserUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PayloadAccountUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All good.",
            "schema": {
              "$ref": "#/definitions/ResponseBase"
            }
          },
          "400": {
            "description": "Fail whale.",
            "schema": {
              "$ref": "#/definitions/ResponseBase"
            }
          }
        },
        "security": [
          {
            "JWT Token Auth": []
          }
        ]
      }
    },
    "/clients": {
      "post": {
        "tags": [
          "Clients"
        ],
        "summary": "ClientCreate",
        "description": "Creates a new client..",
        "operationId": "ClientCreate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PayloadClientCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully creates a new client.",
            "schema": {
              "$ref": "#/definitions/ResponseClientCreate"
            }
          },
          "400": {
            "description": "Fail whale.",
            "schema": {
              "$ref": "#/definitions/ResponseBase"
            }
          },
          "401": {
            "description": "Fail whale.",
            "schema": {
              "$ref": "#/definitions/ResponseBase"
            }
          }
        },
        "security": [
          {
            "JWT Token Auth": []
          }
        ]
      }
    },
    "/clients/{clientId}": {
      "get": {
        "tags": [
          "Clients"
        ],
        "summary": "ClientGet",
        "description": "Gets a client.",
        "operationId": "ClientGet",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Client got.",
            "schema": {
              "$ref": "#/definitions/ResponseClientGet"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Clients"
        ],
        "summary": "ClientUpdate",
        "description": "Updates a client.",
        "operationId": "ClientUpdate",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PayloadClientUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All good.",
            "schema": {
              "$ref": "#/definitions/ResponseBase"
            }
          },
          "400": {
            "description": "Fail whale.",
            "schema": {
              "$ref": "#/definitions/ResponseBase"
            }
          }
        }
      },
      "parameters": [
        {
          "name": "clientId",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "the client's id."
        }
      ]
    },
    "/streams": {
      "post": {
        "tags": [
          "Streams"
        ],
        "summary": "StreamCreate",
        "description": "Creates a new stream.",
        "operationId": "StreamCreate",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successfully creates a new stream.",
            "schema": {
              "$ref": "#/definitions/ResponseStreamCreate"
            }
          }
        },
        "security": [
          {
            "JWT Token Auth": []
          }
        ]
      }
    },
    "/streams/{streamId}": {
      "get": {
        "tags": [
          "Streams"
        ],
        "summary": "StreamGet",
        "description": "Will return the specified stream. If no `Authorization` header is provided and the stream is private you will get a 401. It populates the `objects` array fully. If you want a light version of the stream, query `/api/streams/{streamId}/meta`.",
        "operationId": "StreamGet",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Status 200",
            "schema": {
              "$ref": "#/definitions/ResponseStreamGet"
            }
          },
          "401": {
            "description": "Returned when the stream is private, and the Authorization header is not present, or it the user described by it is not either the owner or in the `sharedWith` array.",
            "schema": {
              "$ref": "#/definitions/ResponseBase"
            }
          },
          "404": {
            "description": "Stream not found.",
            "schema": {
              "$ref": "#/definitions/ResponseBase"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Streams"
        ],
        "summary": "StreamUpdate",
        "description": "Updates a specific stream:\n- it disassebmles the objects into they geometry components, and saves both in the database\n- it overwrites the objects array (if present)\n- it **merges** the layers array (if present)\n- it overwrites the name (if present)\n",
        "operationId": "StreamUpdate",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PayloadStreamUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "On success",
            "schema": {
              "$ref": "#/definitions/ResponseStreamUpdate"
            }
          },
          "401": {
            "description": "Status 401",
            "schema": {
              "$ref": "#/definitions/ResponseBase"
            }
          },
          "404": {
            "description": "Status 404",
            "schema": {
              "$ref": "#/definitions/ResponseBase"
            }
          }
        },
        "security": [
          {
            "JWT Token Auth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Streams"
        ],
        "summary": "StreamDelete",
        "description": "TODO",
        "operationId": "StreamDelete",
        "responses": {
          "200": {
            "description": "Status 200",
            "schema": {
              "$ref": "#/definitions/ResponseBase"
            }
          },
          "400": {
            "description": "Meerps.",
            "schema": {
              "$ref": "#/definitions/ResponseBase"
            }
          },
          "401": {
            "description": "Whoops.",
            "schema": {
              "$ref": "#/definitions/ResponseBase"
            }
          }
        },
        "security": [
          {
            "JWT Token Auth": []
          }
        ]
      },
      "parameters": [
        {
          "name": "streamId",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The stream's id.",
          "x-example": "SyLPkGgNW"
        }
      ]
    },
    "/streams/{streamId}/meta": {
      "get": {
        "tags": [
          "Streams"
        ],
        "summary": "StreamGetMeta",
        "description": "Retrieves the stream without populating the objects array.",
        "operationId": "StreamGetMeta",
        "responses": {
          "200": {
            "description": "Status 200",
            "schema": {
              "$ref": "#/definitions/ResponseStreamMetaGet"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Streams"
        ],
        "summary": "StreamUpdateMeta",
        "description": "Updates stream name and layers.",
        "operationId": "StreamUpdateMeta",
        "consumes": [],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PayloadStreamMetaUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status 200"
          }
        },
        "security": [
          {
            "JWT Token Auth": []
          }
        ]
      },
      "parameters": [
        {
          "name": "streamId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/streams/{streamId}/layers": {
      "get": {
        "tags": [
          "Streams"
        ],
        "summary": "StreamsGetLayers",
        "description": "Retrieves the stream's layers",
        "operationId": "StreamsGetLayers",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Status 200",
            "schema": {
              "$ref": "#/definitions/ResponseStreamLayersGet"
            }
          },
          "400": {
            "description": "whoopsie dupsie.",
            "schema": {
              "$ref": "#/definitions/ResponseBase"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Streams"
        ],
        "summary": "StreamsUpdateLayers",
        "description": "Updates stream layers.",
        "operationId": "StreamsUpdateLayers",
        "consumes": [],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PayloadStreamLayersUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status 200",
            "schema": {
              "$ref": "#/definitions/ResponseBase"
            }
          },
          "400": {
            "description": "Fail whale.",
            "schema": {
              "$ref": "#/definitions/ResponseBase"
            }
          }
        },
        "security": [
          {
            "JWT Token Auth": []
          }
        ]
      },
      "parameters": [
        {
          "name": "streamId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/streams/{streamId}/name": {
      "get": {
        "tags": [
          "Streams"
        ],
        "summary": "StreamGetName",
        "operationId": "StreamGetName",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Status 200",
            "schema": {
              "$ref": "#/definitions/ResponseStreamNameGet"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Streams"
        ],
        "summary": "StreamUpdateName",
        "operationId": "StreamUpdateName",
        "consumes": [],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PayloadStreamNameUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status 200",
            "schema": {
              "$ref": "#/definitions/ResponseBase"
            }
          }
        }
      },
      "parameters": [
        {
          "name": "streamId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/streams/{streamId}/duplicate": {
      "post": {
        "tags": [
          "Streams"
        ],
        "summary": "StreamDuplicate",
        "description": "Duplicate the `streamId` and saves it in a database. The clone will automatically have it's parent field set to the original stream's `_id`. \nFurthermore, the clone's `_id` will be pushed into the parent's children array.",
        "operationId": "StreamDuplicate",
        "responses": {
          "200": {
            "description": "Status 200",
            "schema": {
              "$ref": "#/definitions/ResponseStreamDuplicate"
            }
          }
        },
        "security": [
          {
            "JWT Token Auth": []
          }
        ]
      },
      "parameters": [
        {
          "name": "streamId",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The stream's id.",
          "default": "BJG6Qe-V-"
        }
      ]
    },
    "/objects": {
      "post": {
        "tags": [
          "Objects"
        ],
        "summary": "ObjectCreate",
        "description": "Creates an object.",
        "operationId": "ObjectCreate",
        "consumes": [],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PayloadCreateObject"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status 200",
            "schema": {
              "$ref": "#/definitions/ResponseObjectCreate"
            }
          }
        },
        "security": [
          {
            "JWT Token Auth": []
          }
        ]
      }
    },
    "/objects/{objectId}": {
      "get": {
        "tags": [
          "Objects"
        ],
        "summary": "ObjectGet",
        "description": "Gets a SpeckleObject from the database. It will automatically populate geometry fields for \"heavy types\", that is `'Mesh' || 'Brep' || 'Curve' ||  'Polyline'`.\n",
        "operationId": "ObjectGet",
        "responses": {
          "200": {
            "description": "Object found",
            "schema": {
              "$ref": "#/definitions/ResponseObjectGet"
            }
          },
          "404": {
            "description": "Status 404"
          }
        }
      },
      "put": {
        "tags": [
          "Objects"
        ],
        "summary": "ObjectUpdate",
        "description": "Updates an object by its id.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PayloadObjectUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status 200",
            "schema": {
              "$ref": "#/definitions/ResponseObjectUpdate"
            }
          }
        },
        "security": [
          {
            "JWT Token Auth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Objects"
        ],
        "summary": "ObjectDelete",
        "description": "TODO // Deletes an object.",
        "responses": {
          "200": {
            "description": "Done deal.",
            "schema": {
              "$ref": "#/definitions/ResponseBase"
            }
          }
        }
      },
      "parameters": [
        {
          "name": "objectId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/objects/witharray": {
      "post": {
        "tags": [
          "Objects"
        ],
        "summary": "ObjectCreateArray",
        "description": "Creates and stores in the database a SpeckleObject.\n\nIt will recursively look through the object's properties and store any \"heavy\" geometries (Brep, Mesh, Curve and Polyline) in the Geometries database. All other geometries are stored within the object itself.\n\nResponse will contain the `objects` and `geometries` arrays of the saved documents.",
        "operationId": "ObjectCreateArray",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PayloadObjectCreateWithArray"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status 200",
            "schema": {
              "$ref": "#/definitions/ResponseObjectWithArrayCreate"
            },
            "examples": {
              "application/json": "{\n  \"success\": true,\n  \"objects\": [\n    \"59575428e3290e5c9c1b3122\",\n    \"59575428e3290e5c9c1b3123\",\n    \"59575428e3290e5c9c1b3124\"\n  ],\n  \"geometries\": [\n    \"Mesh.2c3176b21893ac1cb0b69d83f49fa1f6\",\n    \"Polyline.b8cabb148761a918b22128c8f05b1d47\"\n  ]\n}"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Objects"
        ],
        "summary": "ObjectUpdateArray",
        "description": "Updates a list of SpeckleObjects.\n\nIt will recursively look through the object's properties and store any \"heavy\" geometries (Brep, Mesh, Curve and Polyline) in the Geometries database. All other geometries are stored within the object itself.\n\nResponse will contain the `objects` and `geometries` arrays of the saved documents.",
        "operationId": "ObjectUpdateArray",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PayloadObjectCreateWithArray"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status 200",
            "schema": {
              "$ref": "#/definitions/ResponseObjectWithArrayCreate"
            },
            "examples": {
              "application/json": "{\n  \"success\": true,\n  \"objects\": [\n    \"59575428e3290e5c9c1b3122\",\n    \"59575428e3290e5c9c1b3123\",\n    \"59575428e3290e5c9c1b3124\"\n  ],\n  \"geometries\": [\n    \"Mesh.2c3176b21893ac1cb0b69d83f49fa1f6\",\n    \"Polyline.b8cabb148761a918b22128c8f05b1d47\"\n  ]\n} "
            }
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "description": "Describes a user.",
      "properties": {
        "_id": {
          "type": "string",
          "description": "Database uuid."
        },
        "apitoken": {
          "type": "string",
          "description": "a signed jwt token that expires in 1 year."
        },
        "email": {
          "type": "string",
          "description": "user's email"
        },
        "name": {
          "type": "string",
          "description": "User's given name"
        },
        "surname": {
          "type": "string",
          "description": "User's family name"
        },
        "company": {
          "type": "string",
          "description": "Users's company"
        },
        "logins": {
          "type": "array",
          "description": "an array storing each time the user logged in.",
          "items": {
            "type": "string",
            "description": "it's a timestamp XD"
          }
        }
      }
    },
    "SpeckleClient": {
      "type": "object",
      "description": "A representation of the manifestation of a Speckle Client. Whenever an instance of a client is born in any software, it should get its matching identity on the server. When deserialising itself, it should call back to the database and set itself as online. Its uuid sould server as sessionId for the websocket client.",
      "properties": {
        "_id": {
          "type": "string",
          "description": "Database uuid."
        },
        "role": {
          "type": "string",
          "description": "Sender, Receiver, Mixed (for both), Parametric Sender if it can operate on parameters inside a defintion, or whatever else we can think of."
        },
        "documentGuid": {
          "type": "string"
        },
        "documentName": {
          "type": "string"
        },
        "documentType": {
          "type": "string"
        },
        "streamId": {
          "type": "string",
          "description": "The streamId that this clients 'listens to'."
        },
        "owner": {
          "type": "string"
        },
        "online": {
          "type": "boolean",
          "description": "Is it accessible from the server or not?"
        }
      }
    },
    "DataStream": {
      "type": "object",
      "description": "Describes a data stream. The data stream's `streamId` will define the channel on which real-time updates will be distributed on the websocket server.",
      "required": [
        "streamId",
        "name",
        "objects",
        "layers"
      ],
      "properties": {
        "_id": {
          "type": "string",
          "description": "Database uuid."
        },
        "streamId": {
          "type": "string",
          "description": "The stream's short id."
        },
        "owner": {
          "type": "string",
          "description": "The owner's user id."
        },
        "private": {
          "type": "boolean",
          "default": false
        },
        "name": {
          "type": "string",
          "description": "The data stream's name",
          "default": "Anonymous Stream"
        },
        "objects": {
          "type": "array",
          "description": "An array of SpeckleObject ids.",
          "items": {
            "$ref": "#/definitions/SpeckleObject"
          }
        },
        "layers": {
          "type": "array",
          "description": "An array of speckle layers.",
          "items": {
            "$ref": "#/definitions/SpeckleLayer"
          }
        },
        "parent": {
          "type": "string",
          "description": "Parent stream's id, if any. If null, this is a `root` stream."
        },
        "children": {
          "type": "array",
          "description": "Any offspring that this stream might have (created with `/duplicate/{streamId}`",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "SpeckleLayer": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Layer's name"
        },
        "guid": {
          "type": "string",
          "description": "Layer's guid (must be unique)"
        },
        "orderIndex": {
          "type": "integer",
          "description": "Describes this layer's position in the list of layers."
        },
        "startIndex": {
          "type": "number",
          "description": "The index of the first object relative to the stream's objects array"
        },
        "objectCount": {
          "type": "number",
          "description": "How many objects does this layer have."
        },
        "topology": {
          "type": "string",
          "description": "String describing the nested tree structure (Gh centric).",
          "example": "0;0;0;0-2 0;0;0;1-2"
        },
        "properties": {
          "$ref": "#/definitions/SpeckleLayerProperties"
        }
      },
      "description": "Describes a speckle layer. To assign objects to a speckle layer, you'll need to start at `objects[ layer.startIndex ]` and finish at `objects[ layer.startIndex + layer.objectCount ]`."
    },
    "SpeckleLayerProperties": {
      "type": "object",
      "properties": {
        "color": {
          "type": "object",
          "properties": {
            "a": {
              "type": "number",
              "description": "alpha value",
              "default": 1
            },
            "hex": {
              "type": "string",
              "description": "hex color value",
              "default": "#d4d4d4",
              "example": "#d4d4d4"
            }
          }
        },
        "visible": {
          "type": "boolean",
          "description": "toggles layer visibility."
        },
        "pointsize": {
          "type": "number",
          "description": "defines point size in threejs"
        },
        "linewidth": {
          "type": "number",
          "description": "defines line thickness in threejs"
        },
        "shininess": {
          "type": "number",
          "description": "says it all. speckle is superficial."
        },
        "smooth": {
          "type": "boolean",
          "description": "smooth shading toggle"
        },
        "showEdges": {
          "type": "boolean",
          "description": "display edges or not yo."
        },
        "wireframe": {
          "type": "boolean",
          "description": "i'm bored."
        }
      },
      "description": "Holds stream layer properties, mostly for displaying purposes. This object will be filled up with garbage from threejs and others, but below is a minimal schema."
    },
    "SpeckleObject": {
      "type": "object",
      "description": "Minimal representation of a SpeckleObject. Contains other values depending on specific class. See the .net docs for more info.",
      "required": [
        "type"
      ],
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "description": "object's type",
          "enum": [
            "Boolean",
            "Number",
            "String",
            "Interval",
            "Interval2d",
            "Point",
            "Vector",
            "Plane",
            "Line",
            "Rectangle",
            "Circle",
            "Box",
            "Polyline",
            "Curve",
            "Mesh",
            "Brep",
            "Null"
          ]
        },
        "hash": {
          "type": "string",
          "description": "Object's unique hash. It's generated server-side from JSON.stringify( obj.properties ) + obj.geometryHash using a murmurhash3 128bit function.",
          "example": "hash"
        },
        "geometryHash": {
          "type": "string",
          "description": "If the object contains 'heavy' geometry, it should have a geometry hash.",
          "example": "Type.hash"
        },
        "applicationId": {
          "type": "string",
          "example": "GUID",
          "description": "If this object is not an ephemeral object, (ie coming from Grasshopper or Dynamo), and has a unique, persistent and consistent application id, this is where to store said guid."
        },
        "properties": {
          "type": "object",
          "description": "Anything goes in here, including other (speckle) objects."
        }
      }
    },
    "SpeckleBoolean": {
      "allOf": [
        {
          "$ref": "#/definitions/SpeckleObject"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "default": "Boolean"
            },
            "value": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "SpeckleNumber": {
      "allOf": [
        {
          "$ref": "#/definitions/SpeckleObject"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "default": "Number"
            },
            "value": {
              "type": "number",
              "description": "A number. Can be float, double, etc."
            }
          }
        }
      ]
    },
    "SpeckleString": {
      "allOf": [
        {
          "$ref": "#/definitions/SpeckleObject"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "default": "String"
            },
            "value": {
              "type": "string",
              "description": "A string."
            }
          }
        }
      ]
    },
    "SpeckleInterval": {
      "allOf": [
        {
          "$ref": "#/definitions/SpeckleObject"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "default": "Interval"
            },
            "start": {
              "type": "number"
            },
            "end": {
              "type": "number"
            }
          }
        }
      ]
    },
    "SpeckleInterval2d": {
      "allOf": [
        {
          "$ref": "#/definitions/SpeckleObject"
        },
        {
          "type": "object",
          "properties": {
            "U": {
              "$ref": "#/definitions/SpeckleInterval",
              "description": "U interval."
            },
            "V": {
              "$ref": "#/definitions/SpeckleInterval",
              "description": "V interval."
            }
          }
        }
      ]
    },
    "SpecklePoint": {
      "allOf": [
        {
          "$ref": "#/definitions/SpeckleObject"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "default": "Point"
            },
            "value": {
              "description": "An array containing the X, Y and Z coords of the point.",
              "type": "array",
              "items": {
                "type": "number"
              }
            }
          }
        }
      ]
    },
    "SpeckleVector": {
      "allOf": [
        {
          "$ref": "#/definitions/SpeckleObject"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "default": "Vector"
            },
            "value": {
              "description": "An array containing the X, Y and Z coords of the vector.",
              "type": "array",
              "items": {
                "type": "number"
              }
            }
          }
        }
      ]
    },
    "SpecklePlane": {
      "allOf": [
        {
          "$ref": "#/definitions/SpeckleObject"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "default": "Plane"
            },
            "Origin": {
              "$ref": "#/definitions/SpecklePoint",
              "description": "The origin of the plane."
            },
            "Normal": {
              "$ref": "#/definitions/SpeckleVector",
              "description": "The normal of the plane."
            },
            "Xdir": {
              "$ref": "#/definitions/SpeckleVector",
              "description": "The X axis of the plane."
            },
            "Ydir": {
              "$ref": "#/definitions/SpeckleVector",
              "description": "The Y axis of the plane."
            }
          }
        }
      ]
    },
    "SpeckleLine": {
      "allOf": [
        {
          "$ref": "#/definitions/SpeckleObject"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "default": "Line"
            },
            "start": {
              "$ref": "#/definitions/SpecklePoint",
              "description": "Line's start point."
            },
            "end": {
              "$ref": "#/definitions/SpecklePoint",
              "description": "Line's end point."
            }
          }
        }
      ]
    },
    "SpeckleRectangle": {
      "allOf": [
        {
          "$ref": "#/definitions/SpeckleObject"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "default": "Rectangle"
            },
            "A": {
              "$ref": "#/definitions/SpecklePoint"
            },
            "B": {
              "$ref": "#/definitions/SpecklePoint"
            },
            "C": {
              "$ref": "#/definitions/SpecklePoint"
            },
            "D": {
              "$ref": "#/definitions/SpecklePoint"
            }
          }
        }
      ],
      "description": "Contains the four corner points of the rectangle. They should be coplanar."
    },
    "SpeckleCircle": {
      "allOf": [
        {
          "$ref": "#/definitions/SpeckleObject"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "default": "Circle"
            },
            "radius": {
              "type": "number"
            },
            "center": {
              "$ref": "#/definitions/SpecklePoint"
            },
            "normal": {
              "$ref": "#/definitions/SpeckleVector"
            }
          }
        }
      ]
    },
    "SpeckleBox": {
      "allOf": [
        {
          "$ref": "#/definitions/SpeckleObject"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "default": "Box"
            },
            "basePlane": {
              "$ref": "#/definitions/SpecklePlane"
            },
            "xSize": {
              "$ref": "#/definitions/SpeckleInterval"
            },
            "ySize": {
              "$ref": "#/definitions/SpeckleInterval"
            },
            "zSize": {
              "$ref": "#/definitions/SpeckleInterval"
            }
          }
        }
      ]
    },
    "SpecklePolyline": {
      "allOf": [
        {
          "$ref": "#/definitions/SpeckleObject"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "default": "Polyline"
            },
            "value": {
              "type": "array",
              "items": {
                "type": "number"
              }
            }
          }
        }
      ]
    },
    "SpeckleCurve": {
      "allOf": [
        {
          "$ref": "#/definitions/SpeckleObject"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "default": "Curve"
            },
            "base64": {
              "type": "string",
              "description": "See SpeckleBrep."
            },
            "provenance": {
              "type": "string",
              "description": "See SpeckleBrep."
            },
            "displayValue": {
              "$ref": "#/definitions/SpecklePolyline",
              "description": "Contains a speckle polyline representation of this curve."
            }
          }
        }
      ]
    },
    "SpeckleMesh": {
      "allOf": [
        {
          "$ref": "#/definitions/SpeckleObject"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "default": "Mesh"
            },
            "vertices": {
              "type": "array",
              "items": {
                "type": "number"
              },
              "description": "The mesh's vertices array, in a flat array (ie, `x1, y1, z1, x2, y2, ...`)"
            },
            "faces": {
              "type": "array",
              "items": {
                "type": "number"
              },
              "description": "The faces array."
            },
            "colors": {
              "type": "array",
              "items": {
                "type": "number"
              },
              "description": "If any, the colours per vertex."
            }
          }
        }
      ]
    },
    "SpeckleBrep": {
      "allOf": [
        {
          "$ref": "#/definitions/SpeckleObject"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "default": "Brep"
            },
            "base64": {
              "type": "string",
              "description": "A base64 encoded string of the raw byte array of the object. Do not worry base64 encoding making strings 1.5x bigger, gzip essentially neutralises this - both in transit and in the db."
            },
            "provenance": {
              "type": "string",
              "description": "A short prefix of where the base64 comes from. For example, Rhino objects get ON aka Open Nurbs. Later down the road this should be a strict enum."
            },
            "displayValue": {
              "$ref": "#/definitions/SpeckleMesh",
              "description": "Contains a speckle mesh representation of this brep."
            }
          }
        }
      ]
    },
    "PayloadAccountRegister": {
      "type": "object",
      "required": [
        "email",
        "password"
      ],
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "surname": {
          "type": "string"
        },
        "company": {
          "type": "string"
        }
      },
      "description": "User registration payload."
    },
    "PayloadAccountLogin": {
      "type": "object",
      "required": [
        "email",
        "password"
      ],
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "description": "User login payload."
    },
    "PayloadAccountUpdate": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "surname": {
          "type": "string"
        },
        "company": {
          "type": "string"
        }
      },
      "description": "User login payload."
    },
    "PayloadClientCreate": {
      "type": "object",
      "properties": {
        "client": {
          "type": "object",
          "properties": {
            "role": {
              "type": "string"
            },
            "documentGuid": {
              "type": "string"
            },
            "documentName": {
              "type": "string"
            },
            "documentType": {
              "type": "string"
            },
            "streamId": {
              "type": "string"
            }
          }
        }
      }
    },
    "PayloadClientUpdate": {
      "type": "object",
      "properties": {
        "client": {
          "$ref": "#/definitions/SpeckleClient"
        }
      },
      "description": "model payload for Client update."
    },
    "PayloadStreamUpdate": {
      "type": "object",
      "properties": {
        "objects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SpeckleObject"
          }
        },
        "layers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SpeckleLayer"
          }
        },
        "name": {
          "type": "string"
        }
      },
      "description": "model payload for stream update."
    },
    "PayloadStreamMetaUpdate": {
      "type": "object",
      "properties": {
        "layers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SpeckleLayer"
          }
        },
        "name": {
          "type": "string"
        }
      }
    },
    "PayloadStreamLayersUpdate": {
      "type": "object",
      "required": [
        "layers"
      ],
      "properties": {
        "layers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SpeckleLayer"
          }
        }
      }
    },
    "PayloadStreamNameUpdate": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "PayloadCreateObject": {
      "type": "object",
      "properties": {
        "object": {
          "$ref": "#/definitions/SpeckleObject"
        }
      }
    },
    "PayloadObjectUpdate": {
      "type": "object",
      "required": [
        "object"
      ],
      "properties": {
        "object": {
          "$ref": "#/definitions/SpeckleObject"
        }
      }
    },
    "PayloadObjectCreateWithArray": {
      "type": "object",
      "required": [
        "objects"
      ],
      "properties": {
        "objects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SpeckleObject"
          }
        }
      }
    },
    "ResponseBase": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "description": "Besides the http status code, this tells you whether the call succeeded or not."
        },
        "message": {
          "type": "string",
          "description": "Either an error or a confirmation."
        }
      }
    },
    "ResponseAccountRegister": {
      "allOf": [
        {
          "$ref": "#/definitions/ResponseBase"
        },
        {
          "type": "object",
          "properties": {
            "token": {
              "type": "string",
              "description": "Session token, expires in 1 day."
            },
            "apiToken": {
              "type": "string",
              "description": "API token, expires in 1 year."
            }
          }
        }
      ]
    },
    "ResponseAccountLogin": {
      "allOf": [
        {
          "$ref": "#/definitions/ResponseBase"
        },
        {
          "type": "object",
          "properties": {
            "token": {
              "type": "string",
              "description": "Session token, expires in 1 day."
            },
            "apiToken": {
              "type": "string",
              "description": "API token, expires in 1 year."
            }
          }
        }
      ]
    },
    "ResponseAccountStreams": {
      "allOf": [
        {
          "$ref": "#/definitions/ResponseBase"
        },
        {
          "type": "object",
          "properties": {
            "ownedStreams": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DataStream"
              },
              "description": "The user's streams."
            },
            "sharedWithStreams": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DataStream"
              },
              "description": "The streams that are shared with the user."
            }
          }
        }
      ]
    },
    "ResponseAccountClients": {
      "allOf": [
        {
          "$ref": "#/definitions/ResponseBase"
        },
        {
          "type": "object",
          "properties": {
            "clients": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SpeckleClient",
                "description": "The user's streams."
              }
            }
          }
        }
      ]
    },
    "ResponseAccountProfile": {
      "allOf": [
        {
          "$ref": "#/definitions/ResponseBase"
        },
        {
          "type": "object",
          "properties": {
            "user": {
              "$ref": "#/definitions/User"
            }
          }
        }
      ]
    },
    "ResponseClientCreate": {
      "allOf": [
        {
          "$ref": "#/definitions/ResponseBase"
        },
        {
          "type": "object",
          "properties": {
            "clientId": {
              "type": "string",
              "description": "the client's uuid. save & serialise this!"
            }
          }
        }
      ]
    },
    "ResponseClientGet": {
      "allOf": [
        {
          "$ref": "#/definitions/ResponseBase"
        },
        {
          "type": "object",
          "properties": {
            "client": {
              "$ref": "#/definitions/SpeckleClient"
            }
          }
        }
      ]
    },
    "ResponseStreamCreate": {
      "allOf": [
        {
          "$ref": "#/definitions/ResponseBase"
        },
        {
          "type": "object",
          "properties": {
            "stream": {
              "$ref": "#/definitions/DataStream"
            }
          }
        }
      ]
    },
    "ResponseStreamGet": {
      "allOf": [
        {
          "$ref": "#/definitions/ResponseBase"
        },
        {
          "type": "object",
          "properties": {
            "stream": {
              "$ref": "#/definitions/DataStream"
            }
          }
        }
      ]
    },
    "ResponseStreamMetaGet": {
      "allOf": [
        {
          "$ref": "#/definitions/ResponseBase"
        },
        {
          "type": "object",
          "properties": {
            "stream": {
              "$ref": "#/definitions/DataStream",
              "description": "This stream should have its objects array populated."
            }
          }
        }
      ]
    },
    "ResponseStreamLayersGet": {
      "allOf": [
        {
          "$ref": "#/definitions/ResponseBase"
        },
        {
          "type": "object",
          "properties": {
            "layers": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SpeckleLayer"
              }
            }
          }
        }
      ]
    },
    "ResponseStreamNameGet": {
      "allOf": [
        {
          "$ref": "#/definitions/ResponseBase"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            }
          }
        }
      ]
    },
    "ResponseStreamUpdate": {
      "allOf": [
        {
          "$ref": "#/definitions/ResponseBase"
        }
      ]
    },
    "ResponseStreamDuplicate": {
      "allOf": [
        {
          "$ref": "#/definitions/ResponseBase"
        },
        {
          "type": "object",
          "properties": {
            "clone": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "the cloned data stream's new id."
                },
                "streamId": {
                  "type": "string",
                  "description": "the cloned data stream's new streamId."
                }
              }
            },
            "parent": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string"
                },
                "streamId": {
                  "type": "string"
                },
                "children": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "the children of the original stream."
                }
              }
            }
          }
        }
      ]
    },
    "ResponseObjectCreate": {
      "allOf": [
        {
          "$ref": "#/definitions/ResponseBase"
        }
      ]
    },
    "ResponseObjectGet": {
      "allOf": [
        {
          "$ref": "#/definitions/ResponseBase"
        },
        {
          "type": "object",
          "properties": {
            "speckleObject": {
              "$ref": "#/definitions/SpeckleObject"
            }
          }
        }
      ]
    },
    "ResponseObjectUpdate": {
      "allOf": [
        {
          "$ref": "#/definitions/ResponseBase"
        }
      ]
    },
    "ResponseObjectWithArrayCreate": {
      "allOf": [
        {
          "$ref": "#/definitions/ResponseBase"
        }
      ]
    },
    "ResponseObjectWithArrayGet": {
      "allOf": [
        {
          "$ref": "#/definitions/ResponseBase"
        },
        {
          "type": "object",
          "properties": {
            "speckleObjects": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SpeckleObject"
              }
            }
          }
        }
      ]
    },
    "ResponseObjectWithArrayUpdate": {
      "allOf": [
        {
          "$ref": "#/definitions/ResponseBase"
        },
        {
          "type": "object"
        }
      ]
    }
  }
}
