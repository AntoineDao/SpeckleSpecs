{
  "swagger": "2.0",
  "info": {
    "version": "0.0.3",
    "title": "SpeckleCore",
    "description": "Documentation & specifications for the Speckle Server & Speckle Objects.\n\nhttps://speckle.works\n\nThis document is an OpenApi v.2.0 specification for Speckle. It does *not* cover the realtime communication layer (websockets).\n\nThere are two main parts you should look at:\n### 1. Operations\nThis section describes all the available `operations` that the speckle server can perform, revolving around a simple `Accounts` system, `Clients` (keeping track of all the receivers and senders), `Streams` (main data structure) and `Objects`.\n\n### 2. Schema Defintions\nThis section describes the basic building blocks that Speckle works with. It also contains an extensive list of `Payloads` and `Responses` which are less interesting, but a through look at the `SpeckleObject` and its children is needed, especially if you're looking into implementing your own application specific converter. \n\n*Important note*: the following speckle object types `Polyline, Curve, Mesh, Brep` are treated server side in a special manner, as they can be unbounded in size.\n\n###Â Client code generation\nTo generate api clients, you can either use `swagger-codegen` or, alternatively, open up `index.json` (https://raw.githubusercontent.com/didimitrie/SpeckleOpenApi/master/index.json) in the swagger editor (https://editor.swagger.io).\n\n### Contribute\nIf you want to add another type of speckle object, or simply improve the schema, feel free to fork & pr over on github.",
    "contact": {
      "name": "Dimitrie @idid",
      "url": "https://speckle.works",
      "email": "didimitrie@gmail.com"
    },
    "license": {
      "name": ""
    }
  },
  "host": "localhost:8080",
  "basePath": "/api",
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "security": [
    {
      "JWT Token Auth": []
    }
  ],
  "securityDefinitions": {
    "JWT Token Auth": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "paths": {
    "/streams/{streamId}/layers/{layerId}/objects": {
      "$ref": "./streams/LayerObjectsOps.yaml"
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "description": "Describes a user.",
      "properties": {
        "_id": {
          "type": "string",
          "description": "Database uuid."
        },
        "apitoken": {
          "type": "string",
          "description": "a signed jwt token that expires in 1 year."
        },
        "email": {
          "type": "string",
          "description": "user's email"
        },
        "name": {
          "type": "string",
          "description": "User's given name"
        },
        "surname": {
          "type": "string",
          "description": "User's family name"
        },
        "company": {
          "type": "string",
          "description": "Users's company"
        },
        "logins": {
          "type": "array",
          "description": "an array storing each time the user logged in.",
          "items": {
            "type": "object",
            "properties": {
              "date": {
                "type": "string"
              }
            },
            "description": "it's a timestamp XD"
          }
        }
      }
    },
    "SpeckleClient": {
      "type": "object",
      "description": "A representation of the manifestation of a Speckle Client. Whenever an instance of a client is born in any software, it should get its matching identity on the server. When deserialising itself, it should call back to the database and set itself as online. Its uuid sould server as sessionId for the websocket client.",
      "properties": {
        "_id": {
          "type": "string",
          "description": "Database uuid."
        },
        "role": {
          "type": "string",
          "description": "Sender, Receiver, Mixed (for both), Parametric Sender if it can operate on parameters inside a defintion, or whatever else we can think of."
        },
        "documentGuid": {
          "type": "string"
        },
        "documentName": {
          "type": "string"
        },
        "documentType": {
          "type": "string"
        },
        "streamId": {
          "type": "string",
          "description": "The streamId that this clients 'listens to'."
        },
        "owner": {
          "type": "string"
        },
        "online": {
          "type": "boolean",
          "description": "Is it accessible from the server or not?"
        }
      }
    },
    "DataStream": {
      "type": "object",
      "description": "Describes a data stream. The data stream's `streamId` will define the channel on which real-time updates will be distributed on the websocket server.",
      "required": [
        "streamId",
        "name",
        "objects",
        "layers"
      ],
      "properties": {
        "_id": {
          "type": "string",
          "description": "Database uuid."
        },
        "streamId": {
          "type": "string",
          "description": "The stream's short id."
        },
        "owner": {
          "type": "string",
          "description": "The owner's user id."
        },
        "private": {
          "type": "boolean",
          "default": false
        },
        "name": {
          "type": "string",
          "description": "The data stream's name",
          "default": "Anonymous Stream"
        },
        "objects": {
          "type": "array",
          "description": "An array of SpeckleObject ids.",
          "items": {
            "$ref": "#/definitions/SpeckleObject"
          }
        },
        "layers": {
          "type": "array",
          "description": "An array of speckle layers.",
          "items": {
            "$ref": "#/definitions/SpeckleLayer"
          }
        },
        "parent": {
          "type": "string",
          "description": "Parent stream's id, if any. If null, this is a `root` stream."
        },
        "children": {
          "type": "array",
          "description": "Any offspring that this stream might have (created with `/duplicate/{streamId}`",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "SpeckleLayer": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Layer's name"
        },
        "guid": {
          "type": "string",
          "description": "Layer's guid (must be unique)"
        },
        "orderIndex": {
          "type": "integer",
          "description": "Describes this layer's position in the list of layers."
        },
        "startIndex": {
          "type": "number",
          "description": "The index of the first object relative to the stream's objects array"
        },
        "objectCount": {
          "type": "number",
          "description": "How many objects does this layer have."
        },
        "topology": {
          "type": "string",
          "description": "String describing the nested tree structure (Gh centric).",
          "example": "0;0;0;0-2 0;0;0;1-2"
        },
        "properties": {
          "$ref": "#/definitions/SpeckleLayerProperties"
        }
      },
      "description": "Describes a speckle layer. To assign objects to a speckle layer, you'll need to start at `objects[ layer.startIndex ]` and finish at `objects[ layer.startIndex + layer.objectCount ]`."
    },
    "SpeckleLayerProperties": {
      "type": "object",
      "properties": {
        "color": {
          "type": "object",
          "properties": {
            "a": {
              "type": "number",
              "description": "alpha value",
              "default": 1
            },
            "hex": {
              "type": "string",
              "description": "hex color value",
              "default": "#d4d4d4",
              "example": "#d4d4d4"
            }
          }
        },
        "visible": {
          "type": "boolean",
          "description": "toggles layer visibility."
        },
        "pointsize": {
          "type": "number",
          "description": "defines point size in threejs"
        },
        "linewidth": {
          "type": "number",
          "description": "defines line thickness in threejs"
        },
        "shininess": {
          "type": "number",
          "description": "says it all. speckle is superficial."
        },
        "smooth": {
          "type": "boolean",
          "description": "smooth shading toggle"
        },
        "showEdges": {
          "type": "boolean",
          "description": "display edges or not yo."
        },
        "wireframe": {
          "type": "boolean",
          "description": "i'm bored."
        }
      },
      "description": "Holds stream layer properties, mostly for displaying purposes. This object will be filled up with garbage from threejs and others, but below is a minimal schema."
    },
    "SpeckleObject": {
      "type": "object",
      "description": "Base class that is inherited by all other Speckle objects. The only required value is its `type`.\n\nImportant note: the following types: `[ Polyline, Curve, Mesh, Brep ]` are treated server side in a special manner, as they can be unbounded in size.",
      "required": [
        "type"
      ],
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "description": "object's type",
          "enum": [
            "Boolean",
            "Number",
            "String",
            "Interval",
            "Interval2d",
            "Point",
            "Vector",
            "Plane",
            "Line",
            "Rectangle",
            "Circle",
            "Box",
            "Polyline",
            "Curve",
            "Mesh",
            "Brep",
            "Null"
          ]
        },
        "hash": {
          "type": "string",
          "description": "Object's unique hash. It's generated server-side from JSON.stringify( obj.properties ) + obj.geometryHash using a murmurhash3 128bit function.",
          "example": "hash"
        },
        "geometryHash": {
          "type": "string",
          "description": "If the object contains 'heavy' geometry, it should have a geometry hash.",
          "example": "Type.hash"
        },
        "applicationId": {
          "type": "string",
          "example": "GUID",
          "description": "If this object is not an ephemeral object, (ie coming from Grasshopper or Dynamo), and has a unique, persistent and consistent application id, this is where to store said guid."
        },
        "properties": {
          "type": "object",
          "description": "Anything goes in here, including other (speckle) objects."
        }
      }
    },
    "SpeckleBoolean": {
      "allOf": [
        {
          "$ref": "#/definitions/SpeckleObject"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "default": "Boolean"
            },
            "value": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "SpeckleNumber": {
      "allOf": [
        {
          "$ref": "#/definitions/SpeckleObject"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "default": "Number"
            },
            "value": {
              "type": "number",
              "description": "A number. Can be float, double, etc."
            }
          }
        }
      ]
    },
    "SpeckleString": {
      "allOf": [
        {
          "$ref": "#/definitions/SpeckleObject"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "default": "String"
            },
            "value": {
              "type": "string",
              "description": "A string."
            }
          }
        }
      ]
    },
    "SpeckleInterval": {
      "allOf": [
        {
          "$ref": "#/definitions/SpeckleObject"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "default": "Interval"
            },
            "start": {
              "type": "number"
            },
            "end": {
              "type": "number"
            }
          }
        }
      ]
    },
    "SpeckleInterval2d": {
      "allOf": [
        {
          "$ref": "#/definitions/SpeckleObject"
        },
        {
          "type": "object",
          "properties": {
            "U": {
              "$ref": "#/definitions/SpeckleInterval",
              "description": "U interval."
            },
            "V": {
              "$ref": "#/definitions/SpeckleInterval",
              "description": "V interval."
            }
          }
        }
      ]
    },
    "SpecklePoint": {
      "allOf": [
        {
          "$ref": "#/definitions/SpeckleObject"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "default": "Point"
            },
            "value": {
              "description": "An array containing the X, Y and Z coords of the point.",
              "type": "array",
              "items": {
                "type": "number"
              }
            }
          }
        }
      ]
    },
    "SpeckleVector": {
      "allOf": [
        {
          "$ref": "#/definitions/SpeckleObject"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "default": "Vector"
            },
            "value": {
              "description": "An array containing the X, Y and Z coords of the vector.",
              "type": "array",
              "items": {
                "type": "number"
              }
            }
          }
        }
      ]
    },
    "SpecklePlane": {
      "allOf": [
        {
          "$ref": "#/definitions/SpeckleObject"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "default": "Plane"
            },
            "Origin": {
              "$ref": "#/definitions/SpecklePoint",
              "description": "The origin of the plane."
            },
            "Normal": {
              "$ref": "#/definitions/SpeckleVector",
              "description": "The normal of the plane."
            },
            "Xdir": {
              "$ref": "#/definitions/SpeckleVector",
              "description": "The X axis of the plane."
            },
            "Ydir": {
              "$ref": "#/definitions/SpeckleVector",
              "description": "The Y axis of the plane."
            }
          }
        }
      ]
    },
    "SpeckleLine": {
      "allOf": [
        {
          "$ref": "#/definitions/SpeckleObject"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "default": "Line"
            },
            "start": {
              "$ref": "#/definitions/SpecklePoint",
              "description": "Line's start point."
            },
            "end": {
              "$ref": "#/definitions/SpecklePoint",
              "description": "Line's end point."
            }
          }
        }
      ]
    },
    "SpeckleRectangle": {
      "allOf": [
        {
          "$ref": "#/definitions/SpeckleObject"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "default": "Rectangle"
            },
            "A": {
              "$ref": "#/definitions/SpecklePoint"
            },
            "B": {
              "$ref": "#/definitions/SpecklePoint"
            },
            "C": {
              "$ref": "#/definitions/SpecklePoint"
            },
            "D": {
              "$ref": "#/definitions/SpecklePoint"
            }
          }
        }
      ],
      "description": "Contains the four corner points of the rectangle. They should be coplanar."
    },
    "SpeckleCircle": {
      "allOf": [
        {
          "$ref": "#/definitions/SpeckleObject"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "default": "Circle"
            },
            "radius": {
              "type": "number"
            },
            "center": {
              "$ref": "#/definitions/SpecklePoint"
            },
            "normal": {
              "$ref": "#/definitions/SpeckleVector"
            }
          }
        }
      ]
    },
    "SpeckleBox": {
      "allOf": [
        {
          "$ref": "#/definitions/SpeckleObject"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "default": "Box"
            },
            "basePlane": {
              "$ref": "#/definitions/SpecklePlane"
            },
            "xSize": {
              "$ref": "#/definitions/SpeckleInterval"
            },
            "ySize": {
              "$ref": "#/definitions/SpeckleInterval"
            },
            "zSize": {
              "$ref": "#/definitions/SpeckleInterval"
            }
          }
        }
      ]
    },
    "SpecklePolyline": {
      "allOf": [
        {
          "$ref": "#/definitions/SpeckleObject"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "default": "Polyline"
            },
            "value": {
              "type": "array",
              "items": {
                "type": "number"
              }
            }
          }
        }
      ]
    },
    "SpeckleCurve": {
      "allOf": [
        {
          "$ref": "#/definitions/SpeckleObject"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "default": "Curve"
            },
            "base64": {
              "type": "string",
              "description": "See SpeckleBrep."
            },
            "provenance": {
              "type": "string",
              "description": "See SpeckleBrep."
            },
            "displayValue": {
              "$ref": "#/definitions/SpecklePolyline",
              "description": "Contains a speckle polyline representation of this curve."
            }
          }
        }
      ]
    },
    "SpeckleMesh": {
      "allOf": [
        {
          "$ref": "#/definitions/SpeckleObject"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "default": "Mesh"
            },
            "vertices": {
              "type": "array",
              "items": {
                "type": "number"
              },
              "description": "The mesh's vertices array, in a flat array (ie, `x1, y1, z1, x2, y2, ...`)"
            },
            "faces": {
              "type": "array",
              "items": {
                "type": "number"
              },
              "description": "The faces array."
            },
            "colors": {
              "type": "array",
              "items": {
                "type": "number"
              },
              "description": "If any, the colours per vertex."
            }
          }
        }
      ]
    },
    "SpeckleBrep": {
      "allOf": [
        {
          "$ref": "#/definitions/SpeckleObject"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "default": "Brep"
            },
            "base64": {
              "type": "string",
              "description": "A base64 encoded string of the raw byte array of the object. Do not worry base64 encoding making strings 1.5x bigger, gzip essentially neutralises this - both in transit and in the db."
            },
            "provenance": {
              "type": "string",
              "description": "A short prefix of where the base64 comes from. For example, Rhino objects get ON aka Open Nurbs. Later down the road this should be a strict enum."
            },
            "displayValue": {
              "$ref": "#/definitions/SpeckleMesh",
              "description": "Contains a speckle mesh representation of this brep."
            }
          }
        }
      ]
    },
    "PayloadAccountRegister": {
      "type": "object",
      "required": [
        "email",
        "password"
      ],
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "surname": {
          "type": "string"
        },
        "company": {
          "type": "string"
        }
      },
      "description": "User registration payload."
    },
    "PayloadAccountLogin": {
      "type": "object",
      "required": [
        "email",
        "password"
      ],
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "description": "User login payload."
    },
    "PayloadAccountUpdate": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "surname": {
          "type": "string"
        },
        "company": {
          "type": "string"
        }
      },
      "description": "User login payload."
    },
    "PayloadClientCreate": {
      "type": "object",
      "properties": {
        "client": {
          "type": "object",
          "properties": {
            "role": {
              "type": "string"
            },
            "documentGuid": {
              "type": "string"
            },
            "documentName": {
              "type": "string"
            },
            "documentType": {
              "type": "string"
            },
            "streamId": {
              "type": "string"
            }
          }
        }
      }
    },
    "PayloadClientUpdate": {
      "type": "object",
      "properties": {
        "client": {
          "$ref": "#/definitions/SpeckleClient"
        }
      },
      "description": "model payload for Client update."
    },
    "PayloadStreamUpdate": {
      "type": "object",
      "properties": {
        "objects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SpeckleObject"
          }
        },
        "layers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SpeckleLayer"
          }
        },
        "name": {
          "type": "string"
        }
      },
      "description": "model payload for stream update."
    },
    "PayloadStreamNameUpdate": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "PayloadCreateObject": {
      "type": "object",
      "properties": {
        "object": {
          "$ref": "#/definitions/SpeckleObject"
        }
      }
    },
    "PayloadObjectUpdate": {
      "type": "object",
      "required": [
        "object"
      ],
      "properties": {
        "object": {
          "$ref": "#/definitions/SpeckleObject"
        }
      }
    },
    "PayloadObjectCreateWithArray": {
      "type": "object",
      "required": [
        "objects"
      ],
      "properties": {
        "objects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SpeckleObject"
          }
        }
      }
    },
    "PayloadObjectGetWithArray": {
      "type": "object",
      "required": [
        "objects"
      ],
      "properties": {
        "objects": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An array of object ids to retrieve from the database."
        }
      }
    },
    "ResponseBase": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "description": "Besides the http status code, this tells you whether the call succeeded or not."
        },
        "message": {
          "type": "string",
          "description": "Either an error or a confirmation."
        }
      }
    },
    "ResponseAccountRegister": {
      "allOf": [
        {
          "$ref": "#/definitions/ResponseBase"
        },
        {
          "type": "object",
          "properties": {
            "token": {
              "type": "string",
              "description": "Session token, expires in 1 day."
            },
            "apiToken": {
              "type": "string",
              "description": "API token, expires in 1 year."
            }
          }
        }
      ]
    },
    "ResponseAccountLogin": {
      "allOf": [
        {
          "$ref": "#/definitions/ResponseBase"
        },
        {
          "type": "object",
          "properties": {
            "token": {
              "type": "string",
              "description": "Session token, expires in 1 day."
            },
            "apiToken": {
              "type": "string",
              "description": "API token, expires in 1 year."
            }
          }
        }
      ]
    },
    "ResponseAccountStreams": {
      "allOf": [
        {
          "$ref": "#/definitions/ResponseBase"
        },
        {
          "type": "object",
          "properties": {
            "streams": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DataStream"
              },
              "description": "The user's streams."
            },
            "sharedStreams": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DataStream"
              },
              "description": "The streams that are shared with the user."
            }
          }
        }
      ]
    },
    "ResponseAccountClients": {
      "allOf": [
        {
          "$ref": "#/definitions/ResponseBase"
        },
        {
          "type": "object",
          "properties": {
            "clients": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SpeckleClient",
                "description": "The user's streams."
              }
            }
          }
        }
      ]
    },
    "ResponseAccountProfile": {
      "allOf": [
        {
          "$ref": "#/definitions/ResponseBase"
        },
        {
          "type": "object",
          "properties": {
            "user": {
              "$ref": "#/definitions/User"
            }
          }
        }
      ]
    },
    "ResponseClientCreate": {
      "allOf": [
        {
          "$ref": "#/definitions/ResponseBase"
        },
        {
          "type": "object",
          "properties": {
            "clientId": {
              "type": "string",
              "description": "the client's uuid. save & serialise this!"
            }
          }
        }
      ]
    },
    "ResponseClientGet": {
      "allOf": [
        {
          "$ref": "#/definitions/ResponseBase"
        },
        {
          "type": "object",
          "properties": {
            "client": {
              "$ref": "#/definitions/SpeckleClient"
            }
          }
        }
      ]
    },
    "ResponseStreamCreate": {
      "allOf": [
        {
          "$ref": "#/definitions/ResponseBase"
        },
        {
          "type": "object",
          "properties": {
            "stream": {
              "$ref": "#/definitions/DataStream"
            }
          }
        }
      ]
    },
    "ResponseStreamGet": {
      "allOf": [
        {
          "$ref": "#/definitions/ResponseBase"
        },
        {
          "type": "object",
          "properties": {
            "stream": {
              "$ref": "#/definitions/DataStream"
            }
          }
        }
      ]
    },
    "ResponseStreamLayersGet": {
      "allOf": [
        {
          "$ref": "#/definitions/ResponseBase"
        },
        {
          "type": "object",
          "properties": {
            "layers": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SpeckleLayer"
              }
            }
          }
        }
      ]
    },
    "ResponseStreamNameGet": {
      "allOf": [
        {
          "$ref": "#/definitions/ResponseBase"
        },
        {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            }
          }
        }
      ]
    },
    "ResponseStreamUpdate": {
      "allOf": [
        {
          "$ref": "#/definitions/ResponseBase"
        }
      ]
    },
    "ResponseStreamDuplicate": {
      "allOf": [
        {
          "$ref": "#/definitions/ResponseBase"
        },
        {
          "type": "object",
          "properties": {
            "clone": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "the cloned data stream's new id."
                },
                "streamId": {
                  "type": "string",
                  "description": "the cloned data stream's new streamId."
                }
              }
            },
            "parent": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string"
                },
                "streamId": {
                  "type": "string"
                },
                "children": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "the children of the original stream."
                }
              }
            }
          }
        }
      ]
    },
    "ResponseSingleLayer": {
      "allOf": [
        {
          "$ref": "#/definitions/ResponseBase"
        },
        {
          "type": "object",
          "properties": {
            "layer": {
              "$ref": "#/definitions/SpeckleLayer"
            }
          }
        }
      ]
    },
    "ResponseObjectCreate": {
      "allOf": [
        {
          "$ref": "#/definitions/ResponseBase"
        }
      ]
    },
    "ResponseObjectGet": {
      "allOf": [
        {
          "$ref": "#/definitions/ResponseBase"
        },
        {
          "type": "object",
          "properties": {
            "speckleObject": {
              "$ref": "#/definitions/SpeckleObject"
            }
          }
        }
      ]
    },
    "ResponseObjectUpdate": {
      "allOf": [
        {
          "$ref": "#/definitions/ResponseBase"
        }
      ]
    },
    "ResponseObjectWithArrayCreate": {
      "allOf": [
        {
          "$ref": "#/definitions/ResponseBase"
        }
      ]
    },
    "ResponseObjectWithArrayGet": {
      "allOf": [
        {
          "$ref": "#/definitions/ResponseBase"
        },
        {
          "type": "object",
          "properties": {
            "speckleObjects": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SpeckleObject"
              }
            }
          }
        }
      ]
    }
  }
}
