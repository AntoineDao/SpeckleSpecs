get:
  tags:
    - Streams
  summary: StreamGet
  description: |-
    Will return the specified stream. If no `Authorization` header is provided and the stream is private you will get a 401. It populates the `objects` array fully. If you want a light version of the stream, query `/api/streams/{streamId}/meta`.
  operationId: StreamGet
  produces:
    - application/json
  responses:
    '200':
      description: Success whale.
      schema:
        $ref: '#/definitions/ResponseStreamGet'
    '401':
      description: Fail whale.
      schema: 
        $ref: '#/definitions/ResponseBase'
    '404':
      description: Stream not found.
      schema: 
        $ref: '#/definitions/ResponseBase'
put:
  tags:
    - Streams
  summary: StreamUpdate
  description: Updates the stream. 
  operationId: StreamUpdate
  consumes:
    - application/json
  parameters:
    - name: body
      in: body
      required: true
      schema:
        $ref: '#/definitions/PayloadStreamUpdate'
  responses:
    '200':
      description: On success
      schema:
        $ref: '#/definitions/ResponseStreamUpdate'
    '401':
      description: Status 401
      schema: 
        $ref: '#/definitions/ResponseBase'
    '404':
      description: Status 404
      schema: 
        $ref: '#/definitions/ResponseBase'
  security:
    - JWT Token Auth: []
delete:
  tags:
    - Streams
  summary: StreamDelete
  description: Flags stream for deletion.
  operationId: StreamDelete
  responses:
    '200':
      description: Success whale.
      schema: 
        $ref: '#/definitions/ResponseBase'
    '400':
      description: Fail whale.
      schema: 
        $ref: '#/definitions/ResponseBase'
    '401':
      description: Fail whale.
      schema: 
        $ref: '#/definitions/ResponseBase'
  security:
    - JWT Token Auth: []
parameters:
  - name: streamId
    in: path
    required: true
    type: string
    description: The stream's id.
    x-example: 'SyLPkGgNW'
