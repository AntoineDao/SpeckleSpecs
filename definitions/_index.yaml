# Users and clients
User:
  $ref: ./User.yaml
SpeckleClient: 
  $ref: ./Client.yaml

# Streams and their components
DataStream:
  $ref: ./DataStream.yaml
SpeckleLayer:
  $ref: ./SpeckleLayer.yaml
SpeckleLayerProperties:
  $ref: ./SpeckleLayerProperties.yaml


# Objects
SpeckleObject:
  type: object
  description: |-
    Base class that is inherited by all other Speckle objects. The only required value is its `type`.

    Important note: the following types: `[ Polyline, Curve, Mesh, Brep ]` are treated server side in a special manner, as they can be unbounded in size.
  required:
    - type
  discriminator: type
  properties:
    type:
      type: string
      description: object's type
      enum:
        - Boolean
        - Number
        - String
        - Interval
        - Interval2d
        - Point
        - Vector
        - Plane
        - Line
        - Rectangle
        - Circle
        - Box
        - Polyline
        - Curve
        - Mesh
        - Brep
        - 'Null'
    hash:
      type: string
      description: Object's unique hash. It's generated server-side from JSON.stringify( obj.properties ) + obj.geometryHash using a murmurhash3 128bit function.
      example: hash
    geometryHash:
      type: string
      description: If the object contains 'heavy' geometry, it should have a geometry hash.
      example: Type.hash
    applicationId:
      type: string
      example: GUID
      description: 'If this object is not an ephemeral object, (ie coming from Grasshopper or Dynamo), and has a unique, persistent and consistent application id, this is where to store said guid.'
    properties:
      type: object
      description: 'Anything goes in here, including other (speckle) objects.'
  description: Minimal representation of a SpeckleObject. Contains other values depending on specific class. See the .net docs for more info.
SpeckleBoolean:
  allOf: 
    - $ref: '#/definitions/SpeckleObject'
    - type: object
      properties:
        type:
          default: Boolean
        value:
          type: boolean
SpeckleNumber:
  allOf: 
    - $ref: '#/definitions/SpeckleObject'
    - type: object
      properties:
        type:
          default: Number
        value:
          type: number         
          description: A number. Can be float, double, etc.
SpeckleString:
  allOf: 
    - $ref: '#/definitions/SpeckleObject'
    - type: object
      properties:
        type:
          default: String
        value:
          type: string
          description: A string.
SpeckleInterval: 
  allOf: 
    - $ref: '#/definitions/SpeckleObject'
    - type: object
      properties:
        type:
          default: Interval
        start:
          type: number
        end: 
          type: number
SpeckleInterval2d: 
  allOf: 
    - $ref: '#/definitions/SpeckleObject'
    - type: object
      properties:
        U:
          $ref: '#/definitions/SpeckleInterval'
          description: U interval.
        V:
          $ref: '#/definitions/SpeckleInterval'
          description: V interval.
SpecklePoint:
  allOf: 
    - $ref: '#/definitions/SpeckleObject'
    - type: object
      properties:
        type:
          default: Point
        value:
          description: An array containing the X, Y and Z coords of the point.
          type: array
          items:
            type: number
SpeckleVector: 
  allOf: 
    - $ref: '#/definitions/SpeckleObject'
    - type: object
      properties:
        type: 
          default: Vector
        value:
          description: An array containing the X, Y and Z coords of the vector.
          type: array
          items: 
            type: number
SpecklePlane:
  allOf:
    - $ref: '#/definitions/SpeckleObject'
    - type: object
      properties: 
        type: 
          default: Plane
        Origin: 
          $ref: '#/definitions/SpecklePoint'
          description: The origin of the plane.
        Normal:
          $ref: '#/definitions/SpeckleVector'
          description: The normal of the plane.
        Xdir:
          $ref: '#/definitions/SpeckleVector'
          description: The X axis of the plane.
        Ydir:
          $ref: '#/definitions/SpeckleVector'
          description: The Y axis of the plane.
SpeckleLine: 
  allOf:
    - $ref: '#/definitions/SpeckleObject'
    - type: object
      properties:
        type: 
          default: Line 
        start: 
          $ref: '#/definitions/SpecklePoint'
          description: Line's start point.
        end: 
          $ref: '#/definitions/SpecklePoint'
          description: Line's end point.
SpeckleRectangle:
  allOf:
    - $ref: '#/definitions/SpeckleObject'
    - type: object
      properties:
        type:
          default: Rectangle
        A:
          $ref: '#/definitions/SpecklePoint' 
        B:
          $ref: '#/definitions/SpecklePoint' 
        C:
          $ref: '#/definitions/SpecklePoint' 
        D:
          $ref: '#/definitions/SpecklePoint' 
  description: Contains the four corner points of the rectangle. They should be coplanar.
SpeckleCircle: 
  allOf:
    - $ref: '#/definitions/SpeckleObject'
    - type: object
      properties: 
        type:
          default: Circle
        radius:
          type: number
        center:
          $ref: '#/definitions/SpecklePoint'
        normal:
          $ref: '#/definitions/SpeckleVector'
SpeckleBox:
  allOf:
    - $ref: '#/definitions/SpeckleObject'
    - type: object
      properties: 
        type:
          default: Box
        basePlane:
          $ref: '#/definitions/SpecklePlane'
        xSize:
          $ref: '#/definitions/SpeckleInterval'
        ySize:
          $ref: '#/definitions/SpeckleInterval'
        zSize:
          $ref: '#/definitions/SpeckleInterval'
SpecklePolyline:
  allOf:
    - $ref: '#/definitions/SpeckleObject'
    - type: object
      properties: 
        type:
          default: Polyline
        value:
          type: array
          items: 
            type: number
SpeckleCurve:
  allOf: 
    - $ref: '#/definitions/SpeckleObject'
    - type: object
      properties:
        type:
          default: Curve
        base64:
          type: string
          description: See SpeckleBrep.
        provenance:
          type: string
          description: See SpeckleBrep.
        displayValue:
          $ref: '#/definitions/SpecklePolyline'
          description: Contains a speckle polyline representation of this curve.
SpeckleMesh:
  allOf:
    - $ref: '#/definitions/SpeckleObject'
    - type: object
      properties:
        type: 
          default: Mesh
        vertices:
          type: array
          items:
            type: number
          description: The mesh's vertices array, in a flat array (ie, `x1, y1, z1, x2, y2, ...`)
        faces:
          type: array
          items:
            type: number
          description: The faces array.
        colors:
          type: array
          items:
            type: number
          description: If any, the colours per vertex.
SpeckleBrep:
  allOf: 
    - $ref: '#/definitions/SpeckleObject'
    - type: object
      properties: 
        type:
          default: Brep
        base64: 
          type: string
          description: A base64 encoded string of the raw byte array of the object. Do not worry base64 encoding making strings 1.5x bigger, gzip essentially neutralises this - both in transit and in the db.
        provenance:
          type: string
          description: A short prefix of where the base64 comes from. For example, Rhino objects get ON aka Open Nurbs. Later down the road this should be a strict enum.
        displayValue:
          $ref: '#/definitions/SpeckleMesh'
          description: Contains a speckle mesh representation of this brep.

# Payloads
PayloadAccountRegister:
  $ref: ./payloads/PayloadAccountRegister.yaml
PayloadAccountLogin: 
  $ref: ./payloads/PayloadAccountLogin.yaml
PayloadAccountUpdate:
  $ref: ./payloads/PayloadAccountUpdate.yaml
PayloadClientCreate:
  $ref: ./payloads/PayloadClientCreate.yaml
PayloadClientUpdate:
  $ref: ./payloads/PayloadClientUpdate.yaml
PayloadStreamUpdate:
  $ref: ./payloads/PayloadStreamUpdate.yaml
PayloadStreamMetaUpdate:
  $ref: ./payloads/PayloadStreamMetaUpdate.yaml
PayloadStreamLayersUpdate:
  $ref: ./payloads/PayloadStreamLayersUpdate.yaml
PayloadStreamNameUpdate:
  $ref: ./payloads/PayloadStreamNameUpdate.yaml
PayloadCreateObject:
  $ref: ./payloads/PayloadObjectCreate.yaml
PayloadObjectUpdate:
  $ref: ./payloads/PayloadObjectUpdate.yaml
PayloadObjectCreateWithArray:
  $ref: ./payloads/PayloadObjectCreateWithArray.yaml
PayloadObjectGetWithArray:
  $ref: ./payloads/PayloadObjectGetWithArray.yaml

# Responses TODO: Unify on server too
ResponseBase:
  type: object
  properties: 
    success: 
      type: boolean
      description: Besides the http status code, this tells you whether the call succeeded or not.
    message: 
      type: string
      description: Either an error or a confirmation.
# Responses Accounts
ResponseAccountRegister: 
  $ref: ./responses/ResponseAccountRegister.yaml
ResponseAccountLogin: 
  $ref: ./responses/ResponseAccountLogin.yaml
ResponseAccountStreams:
  $ref: ./responses/ResponseAccountStreams.yaml
ResponseAccountClients:
  $ref: ./responses/ResponseAccountClients.yaml
ResponseAccountProfile:
  $ref: ./responses/ResponseAccountProfile.yaml

# Responses Clients
ResponseClientCreate:
  $ref: ./responses/ResponseClientCreate.yaml
ResponseClientGet:
  $ref: ./responses/ResponseClientGet.yaml

# Responses Streams
ResponseStreamCreate:
  $ref: ./responses/ResponseStreamCreate.yaml
ResponseStreamGet:
  $ref: ./responses/ResponseStreamGet.yaml
ResponseStreamMetaGet:
  $ref: ./responses/ResponseStreamMetaGet.yaml
ResponseStreamLayersGet:
  $ref: ./responses/ResponseStreamLayersGet.yaml
ResponseStreamNameGet:
  $ref: ./responses/ResponseStreamNameGet.yaml
ResponseStreamUpdate:
  $ref: ./responses/ResponseStreamUpdate.yaml
ResponseStreamUpdate:
  $ref: ./responses/ResponseStreamUpdate.yaml
ResponseStreamDuplicate:
  $ref: ./responses/ResponseStreamDuplicate.yaml

# Responses Objects
ResponseObjectCreate:
  $ref: ./responses/ResponseObjectCreate.yaml 
ResponseObjectGet:
  $ref: ./responses/ResponseObjectGet.yaml 
ResponseObjectUpdate:
  $ref: ./responses/ResponseObjectUpdate.yaml 
ResponseObjectWithArrayCreate:
  $ref: ./responses/ResponseObjectWithArrayCreate.yaml 
ResponseObjectWithArrayGet:
  $ref: ./responses/ResponseObjectWithArrayGet.yaml
